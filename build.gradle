import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
	}
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

version = "${project.minecraft}-${project.modVersion}"
group = "io.github.ocelot"
archivesBaseName = project.modId

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
	mappings channel: project.mappingsChannel, version: project.mappings

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory project.file('run/client')
			property "mixin.env.disableRefMap", "true"
			property 'forge.logging.console.level', 'debug'

			mods {
				jev {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run/server')
			property "mixin.env.disableRefMap", "true"
			property 'forge.logging.console.level', 'debug'

			mods {
				jev {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run/data')
			property "mixin.env.disableRefMap", "true"
			property 'forge.logging.console.level', 'debug'
			args '--mod', 'jev', '--all', '--output', file('src/generated/resources/')
			mods {
				jev {
					source sourceSets.main
				}
			}
		}
	}
}

repositories {
	maven {
		// location of the maven that hosts JEI files
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.k-4u.nl"
	}
	maven {
		url "https://www.cursemaven.com"
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${project.minecraft}-${project.forge}"

	// compile against the JEI API but do not include it at runtime
	compileOnly fg.deobf("mezz.jei:jei-${project.minecraft}:${project.jei}:api")
	// at runtime, use the full JEI jar
	runtimeOnly fg.deobf("mezz.jei:jei-${project.minecraft}:${project.jei}")

	runtimeOnly fg.deobf("curse.maven:obfuscate-289380:${project.obfuscate}")
	implementation fg.deobf("curse.maven:vehicle-286660:${project.vehicle}")
}

processResources {
	inputs.property("modName", project.modName)
	inputs.property("modVersion", project.modVersion)
	inputs.property("modId", project.modId)
	filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
		expand 'modVersion': project.modVersion, 'modId': project.modId, 'modName': project.modName
	}

	// Minify json resources
	doLast {
		fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
			File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
		}
	}
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : project.modName,
				"Specification-Vendor"    : "Ocelot",
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : "${version}",
				"Implementation-Vendor"   :"Ocelot",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
		])
	}
}
